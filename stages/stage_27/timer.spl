[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;
//breakpoint;
backup;
//---------put here
//print [SYSTEM_STATUS_TABLE + 1];
//stage 27

if( [SYSTEM_STATUS_TABLE+5] == SWAP_IN || [SYSTEM_STATUS_TABLE+5] == SWAP_OUT ) then
	//print "actualswap";
	if( [SYSTEM_STATUS_TABLE+1] == 15 && [SYSTEM_STATUS_TABLE+5] == SWAP_IN ) then
		//call swap_in() fun from Pager module
		R1 = SWAP_IN;
		//print "swapping in";
		call MOD_6;
	else 
		if( [SYSTEM_STATUS_TABLE+1] == 15 && [SYSTEM_STATUS_TABLE+5] == SWAP_OUT ) then
			//call swap_out() fun from Pager module
			//print "swapping out";
			R1 = SWAP_OUT;
			call MOD_6;
		endif;
	endif;

else
	if ( [SYSTEM_STATUS_TABLE+2] < MEM_LOW ) then
		//set paging status in system status table
		[SYSTEM_STATUS_TABLE+5] = SWAP_OUT;
		//print "SWAPOUT FLAG";
	else
		if( [SYSTEM_STATUS_TABLE+4] > 0 ) then
			R0 = 3;
			while (R0 < MAX_PROC_NUM - 1) do
				if( [PROCESS_TABLE+R0*16+6] == 1 && [PROCESS_TABLE+R0*16] > MAX_TICK ) then
					[SYSTEM_STATUS_TABLE + 5] = SWAP_IN;
					//print "SWAPIN FLAG";
					break;
				endif;
				R0 = R0 + 1;
			endwhile;
			if (R0 == MAX_PROC_NUM - 1) then
				if ([SYSTEM_STATUS_TABLE+2] > MEM_HIGH) then
					[SYSTEM_STATUS_TABLE + 5] = SWAP_IN;
					//print "SWAPIN FLAG";
				endif;
			endif;
		endif;
	endif;
endif;

//over stage 27

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = READY;

R0 = 0;
while( R0 < MAX_PROC_NUM ) do
	//TICK++
	[PROCESS_TABLE + R0 * 16] = [PROCESS_TABLE + R0 * 16] + 1;
	R0 = R0 + 1;
endwhile;

call SCHEDULER;

restore;

SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
ireturn;
